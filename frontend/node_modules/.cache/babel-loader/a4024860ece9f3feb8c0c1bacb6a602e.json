{"ast":null,"code":"import _classCallCheck from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\src\\\\desk\\\\FileUploadComponent.jsx\";\nimport React from 'react';\n\nvar FileUploadComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileUploadComponent, _React$Component);\n\n  function FileUploadComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FileUploadComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FileUploadComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      uploading: false,\n      error: null\n    };\n\n    _this.handleFileChange = function (event) {\n      var file = event.target.files[0];\n      if (!file) return;\n\n      _this.setState({\n        uploading: true,\n        error: null\n      });\n\n      var formData = new FormData();\n      formData.append('templateFile', file);\n      fetch('/api/templates/upload', {\n        method: 'POST',\n        body: formData\n      }).then(function (response) {\n        // Выводим текст ответа перед парсингом JSON\n        response.text().then(function (text) {\n          return console.log(text);\n        });\n        return response.json(); // Преобразуем ответ в JSON, если это возможно\n      }).then(function (data) {\n        console.log('File uploaded successfully:', data);\n      }).catch(function (error) {\n        console.error('Error uploading file:', error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(FileUploadComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          uploading = _this$state.uploading,\n          error = _this$state.error;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, uploading ? 'Загружается...' : 'Загрузить файл'), React.createElement(\"input\", {\n        id: \"file-upload\",\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        onChange: this.handleFileChange,\n        onClick: function onClick(event) {\n          return event.target.value = null;\n        } // Reset input value\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), error && React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, error));\n    }\n  }]);\n\n  return FileUploadComponent;\n}(React.Component);\n\nexport default FileUploadComponent;","map":{"version":3,"sources":["F:\\Scripts\\IBS_Dunice\\frontend\\src\\desk\\FileUploadComponent.jsx"],"names":["React","FileUploadComponent","state","uploading","error","handleFileChange","event","file","target","files","setState","formData","FormData","append","fetch","method","body","then","response","text","console","log","json","data","catch","display","value","Component"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,mB;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,KAAK,EAAE;AAFD,K;;UAKRC,gB,GAAmB,UAAAC,KAAK,EAAI;AAC1B,UAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,UAAI,CAACF,IAAL,EAAW;;AAEX,YAAKG,QAAL,CAAc;AAAEP,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,KAAK,EAAE;AAA1B,OAAd;;AACA,UAAMO,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,cAAhB,EAAgCN,IAAhC;AAEAO,MAAAA,KAAK,CAAC,uBAAD,EAA0B;AAC7BC,QAAAA,MAAM,EAAE,MADqB;AAE7BC,QAAAA,IAAI,EAAEL;AAFuB,OAA1B,CAAL,CAIDM,IAJC,CAII,UAAAC,QAAQ,EAAI;AACd;AACAA,QAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAAAE,IAAI;AAAA,iBAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAJ;AAAA,SAAzB;AACA,eAAOD,QAAQ,CAACI,IAAT,EAAP,CAHc,CAGW;AAC5B,OARC,EASDL,IATC,CASI,UAAAM,IAAI,EAAI;AACVH,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CE,IAA3C;AACH,OAXC,EAYDC,KAZC,CAYK,UAAApB,KAAK,EAAI;AACZgB,QAAAA,OAAO,CAAChB,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACH,OAdC;AAeD,K;;;;;;;6BAEQ;AAAA,wBACsB,KAAKF,KAD3B;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,KADZ,eACYA,KADZ;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,aAAf;AAA6B,QAAA,SAAS,EAAC,iBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,SAAS,GAAG,gBAAH,GAAsB,gBADlC,CADF,EAIE;AACE,QAAA,EAAE,EAAC,aADL;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAE;AAAEsB,UAAAA,OAAO,EAAE;AAAX,SAHT;AAIE,QAAA,QAAQ,EAAE,KAAKpB,gBAJjB;AAKE,QAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,iBAAWA,KAAK,CAACE,MAAN,CAAakB,KAAb,GAAqB,IAAhC;AAAA,SALX,CAKiD;AALjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAWGtB,KAAK,IAAI;AAAG,QAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsBA,KAAtB,CAXZ,CADF;AAeD;;;;EAhD6BJ,KAAK,CAAC2B,S;;AAoDtC,eAAe1B,mBAAf","sourcesContent":["\r\nimport React from 'react';\r\n\r\nclass FileUploadComponent extends React.Component {\r\n    state = {\r\n      uploading: false,\r\n      error: null\r\n    };\r\n  \r\n    handleFileChange = event => {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n  \r\n      this.setState({ uploading: true, error: null });\r\n      const formData = new FormData();\r\n      formData.append('templateFile', file);\r\n  \r\n      fetch('/api/templates/upload', {\r\n        method: 'POST',\r\n        body: formData\r\n    })\r\n    .then(response => {\r\n        // Выводим текст ответа перед парсингом JSON\r\n        response.text().then(text => console.log(text));\r\n        return response.json();  // Преобразуем ответ в JSON, если это возможно\r\n    })\r\n    .then(data => {\r\n        console.log('File uploaded successfully:', data);\r\n    })\r\n    .catch(error => {\r\n        console.error('Error uploading file:', error);\r\n    });\r\n    }\r\n  \r\n    render() {\r\n      const { uploading, error } = this.state;\r\n      return (\r\n        <div>\r\n          <label htmlFor=\"file-upload\" className=\"btn btn-primary\">\r\n            {uploading ? 'Загружается...' : 'Загрузить файл'}\r\n          </label>\r\n          <input\r\n            id=\"file-upload\"\r\n            type=\"file\"\r\n            style={{ display: 'none' }}\r\n            onChange={this.handleFileChange}\r\n            onClick={(event) => event.target.value = null} // Reset input value\r\n          />\r\n          {error && <p className=\"error\">{error}</p>}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\n  export default FileUploadComponent;"]},"metadata":{},"sourceType":"module"}