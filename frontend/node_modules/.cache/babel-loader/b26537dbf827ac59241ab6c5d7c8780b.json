{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _require = require('../common/mapUtil'),\n    array2map = _require.array2map;\n\nmodule.exports = function (app) {\n  var _app$api$validation = app.api.validation,\n      existsOrError = _app$api$validation.existsOrError,\n      notExistsOrError = _app$api$validation.notExistsOrError;\n\n  var save = function save(req, res) {\n    var employee = {\n      id: req.body.id,\n      name: req.body.name,\n      identifier: req.body.identifier,\n      email: req.body.email,\n      phone: req.body.phone,\n      userId: req.decoded.id\n    };\n    if (req.params.id) employee.id = req.params.id;\n\n    try {\n      existsOrError(employee.name, 'Name was not informed!');\n      existsOrError(employee.identifier, 'Identifier was not informed!');\n      existsOrError(employee.userId, 'User was not informed!');\n    } catch (msg) {\n      return res.status(400).json({\n        errors: [msg]\n      });\n    }\n\n    if (employee.id) {\n      employee.updated_at = new Date();\n      app.db('employees').update(employee).where({\n        id: employee.id\n      }).then(function (_) {\n        return res.status(204).send();\n      }).catch(function (err) {\n        return res.status(500).json({\n          errors: [err]\n        });\n      });\n    } else {\n      employee.created_at = new Date();\n      employee.updated_at = null;\n      app.db('employees').insert(employee, 'id').then(function (_) {\n        return res.status(204).send();\n      }).catch(function (err) {\n        res.status(500).json({\n          errors: [err]\n        });\n      });\n    }\n  };\n\n  var remove =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(req, res) {\n      var rowsDeleted;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              existsOrError(req.params.id, \"Employee id was not informed!\"); //const desks = await app.db('desks').where({ employeeId: req.params.id })\n              //notExistsOrError(desks, \"There is a desk with this employee!\")\n\n              _context.next = 4;\n              return app.db('employees').where({\n                id: req.params.id\n              }).del();\n\n            case 4:\n              rowsDeleted = _context.sent;\n              existsOrError(rowsDeleted, \"Employee was not found!\");\n              res.status(204).send();\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              res.status(400).json({\n                errors: [_context.t0]\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function remove(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getRoomsIds = function getRoomsIds(userId) {\n    return new Promise(function (resolve, reject) {\n      var roomsIds = [];\n      app.db.select({\n        id: 'rooms.id'\n      }).from('rooms').leftJoin('teams', 'teams.roomId', 'rooms.id').leftJoin('users', 'teams.userId', 'users.id').where({\n        'rooms.userId': userId\n      }).orWhere({\n        'users.id': userId\n      }).then(function (rooms) {\n        if (rooms.length > 0) {\n          var roomsMap = array2map(rooms, 'id');\n          roomsIds = Object.keys(roomsMap);\n        }\n\n        resolve({\n          userId: userId,\n          roomsIds: roomsIds\n        });\n      }).catch(function (err) {\n        return reject(err);\n      });\n    });\n  };\n\n  var getTeam = function getTeam(rooms) {\n    var distinctUsers = {};\n    return rooms && rooms.reduce(function (users, member) {\n      if (!distinctUsers[member.memberId]) {\n        distinctUsers[member.memberId] = 1;\n        users.push({\n          userId: member.memberId,\n          user: member.memberName,\n          time: member.memberTime\n        });\n      }\n\n      return users;\n    }, []);\n  };\n\n  var getMembersIds = function getMembersIds(_ref2) {\n    var userId = _ref2.userId,\n        roomsIds = _ref2.roomsIds;\n    return new Promise(function (resolve, reject) {\n      var membersIds = [userId];\n\n      if (roomsIds.length === 0) {\n        resolve(membersIds);\n      } else {\n        app.db.select({\n          id: 'rooms.id',\n          memberId: 'users.id',\n          memberName: 'users.name',\n          memberTime: 'users.created_at'\n        }).from('rooms').leftJoin('teams', 'teams.roomId', 'rooms.id').leftJoin('users', 'teams.userId', 'users.id').whereIn('rooms.id', roomsIds).then(function (rooms) {\n          if (rooms.length > 0) {\n            var team = getTeam(rooms);\n            var usersMap = array2map(team, 'userId');\n            membersIds = Object.keys(usersMap);\n          }\n\n          resolve(membersIds);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      }\n    });\n  };\n\n  var getEmployees = function getEmployees(membersIds) {\n    return new Promise(function (resolve, reject) {\n      app.db('employees').whereIn('employees.userId', membersIds).then(function (employees) {\n        return resolve(employees);\n      }).catch(function (err) {\n        return reject(err);\n      });\n    });\n  };\n\n  var get = function get(req, res) {\n    return getRoomsIds(req.decoded.id).then(getMembersIds).then(getEmployees).then(function (employees) {\n      return res.json(employees);\n    }).catch(function (err) {\n      return res.status(500).json({\n        errors: [err]\n      });\n    });\n  };\n\n  var getById = function getById(req, res) {\n    app.db('employees').where({\n      id: req.params.id\n    }).first().then(function (employee) {\n      return res.json(employee);\n    }).catch(function (err) {\n      return res.status(500).json({\n        errors: [err]\n      });\n    });\n  };\n\n  return {\n    save: save,\n    remove: remove,\n    get: get,\n    getById: getById\n  };\n};","map":{"version":3,"sources":["F:\\Scripts\\IBS_Dunice\\frontend\\src\\employee\\employeeActions.js"],"names":["require","array2map","module","exports","app","api","validation","existsOrError","notExistsOrError","save","req","res","employee","id","body","name","identifier","email","phone","userId","decoded","params","msg","status","json","errors","updated_at","Date","db","update","where","then","_","send","catch","err","created_at","insert","remove","del","rowsDeleted","getRoomsIds","Promise","resolve","reject","roomsIds","select","from","leftJoin","orWhere","rooms","length","roomsMap","Object","keys","getTeam","distinctUsers","reduce","users","member","memberId","push","user","memberName","time","memberTime","getMembersIds","membersIds","whereIn","team","usersMap","getEmployees","employees","get","getById","first"],"mappings":";;;eAAsBA,OAAO,CAAC,mBAAD,C;IAArBC,S,YAAAA,S;;AAERC,MAAM,CAACC,OAAP,GAAiB,UAAAC,GAAG,EAAI;AAAA,4BACwBA,GAAG,CAACC,GAAJ,CAAQC,UADhC;AAAA,MACZC,aADY,uBACZA,aADY;AAAA,MACGC,gBADH,uBACGA,gBADH;;AAGpB,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAMC,GAAN,EAAc;AACvB,QAAMC,QAAQ,GAAG;AACbC,MAAAA,EAAE,EAAEH,GAAG,CAACI,IAAJ,CAASD,EADA;AAEbE,MAAAA,IAAI,EAAEL,GAAG,CAACI,IAAJ,CAASC,IAFF;AAGbC,MAAAA,UAAU,EAAEN,GAAG,CAACI,IAAJ,CAASE,UAHR;AAIbC,MAAAA,KAAK,EAAEP,GAAG,CAACI,IAAJ,CAASG,KAJH;AAKbC,MAAAA,KAAK,EAAER,GAAG,CAACI,IAAJ,CAASI,KALH;AAMbC,MAAAA,MAAM,EAAET,GAAG,CAACU,OAAJ,CAAYP;AANP,KAAjB;AASA,QAAIH,GAAG,CAACW,MAAJ,CAAWR,EAAf,EAAmBD,QAAQ,CAACC,EAAT,GAAcH,GAAG,CAACW,MAAJ,CAAWR,EAAzB;;AAEnB,QAAI;AACAN,MAAAA,aAAa,CAACK,QAAQ,CAACG,IAAV,EAAgB,wBAAhB,CAAb;AACAR,MAAAA,aAAa,CAACK,QAAQ,CAACI,UAAV,EAAsB,8BAAtB,CAAb;AACAT,MAAAA,aAAa,CAACK,QAAQ,CAACO,MAAV,EAAkB,wBAAlB,CAAb;AACH,KAJD,CAIE,OAAOG,GAAP,EAAY;AACV,aAAOX,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,MAAM,EAAE,CAACH,GAAD;AAAV,OAArB,CAAP;AACH;;AAED,QAAIV,QAAQ,CAACC,EAAb,EAAiB;AACbD,MAAAA,QAAQ,CAACc,UAAT,GAAsB,IAAIC,IAAJ,EAAtB;AAEAvB,MAAAA,GAAG,CAACwB,EAAJ,CAAO,WAAP,EACKC,MADL,CACYjB,QADZ,EAEKkB,KAFL,CAEW;AAAEjB,QAAAA,EAAE,EAAED,QAAQ,CAACC;AAAf,OAFX,EAGKkB,IAHL,CAGU,UAAAC,CAAC;AAAA,eAAIrB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,EAAJ;AAAA,OAHX,EAIKC,KAJL,CAIW,UAAAC,GAAG;AAAA,eAAIxB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE,CAACU,GAAD;AAAV,SAArB,CAAJ;AAAA,OAJd;AAKH,KARD,MAQO;AAEHvB,MAAAA,QAAQ,CAACwB,UAAT,GAAsB,IAAIT,IAAJ,EAAtB;AACAf,MAAAA,QAAQ,CAACc,UAAT,GAAsB,IAAtB;AAEAtB,MAAAA,GAAG,CAACwB,EAAJ,CAAO,WAAP,EACKS,MADL,CACYzB,QADZ,EACsB,IADtB,EAEKmB,IAFL,CAEU,UAAAC,CAAC;AAAA,eAAIrB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,EAAJ;AAAA,OAFX,EAGKC,KAHL,CAGW,UAAAC,GAAG,EAAI;AACVxB,QAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE,CAACU,GAAD;AAAV,SAArB;AACH,OALL;AAMH;AACJ,GAxCD;;AA0CA,MAAMG,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG,iBAAO5B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPJ,cAAAA,aAAa,CAACG,GAAG,CAACW,MAAJ,CAAWR,EAAZ,EAAgB,+BAAhB,CAAb,CAFO,CAIP;AACA;;AALO;AAAA,qBAOmBT,GAAG,CAACwB,EAAJ,CAAO,WAAP,EAAoBE,KAApB,CAA0B;AAAEjB,gBAAAA,EAAE,EAAEH,GAAG,CAACW,MAAJ,CAAWR;AAAjB,eAA1B,EAAiD0B,GAAjD,EAPnB;;AAAA;AAODC,cAAAA,WAPC;AASPjC,cAAAA,aAAa,CAACiC,WAAD,EAAc,yBAAd,CAAb;AAEA7B,cAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBU,IAAhB;AAXO;AAAA;;AAAA;AAAA;AAAA;AAaPtB,cAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAArB;;AAbO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAANa,MAAM;AAAA;AAAA;AAAA,KAAZ;;AAiBA,MAAMG,WAAW,GAAG,SAAdA,WAAc,CAACtB,MAAD;AAAA,WAAY,IAAIuB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7D,UAAIC,QAAQ,GAAG,EAAf;AACAzC,MAAAA,GAAG,CAACwB,EAAJ,CAAOkB,MAAP,CAAc;AACVjC,QAAAA,EAAE,EAAE;AADM,OAAd,EAEGkC,IAFH,CAEQ,OAFR,EAGKC,QAHL,CAGc,OAHd,EAGuB,cAHvB,EAGuC,UAHvC,EAIKA,QAJL,CAIc,OAJd,EAIuB,cAJvB,EAIuC,UAJvC,EAKKlB,KALL,CAKW;AAAE,wBAAgBX;AAAlB,OALX,EAMK8B,OANL,CAMa;AAAE,oBAAY9B;AAAd,OANb,EAOKY,IAPL,CAOU,UAAAmB,KAAK,EAAI;AACX,YAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AAClB,cAAMC,QAAQ,GAAGnD,SAAS,CAACiD,KAAD,EAAQ,IAAR,CAA1B;AACAL,UAAAA,QAAQ,GAAGQ,MAAM,CAACC,IAAP,CAAYF,QAAZ,CAAX;AACH;;AACDT,QAAAA,OAAO,CAAC;AAAExB,UAAAA,MAAM,EAANA,MAAF;AAAU0B,UAAAA,QAAQ,EAARA;AAAV,SAAD,CAAP;AACH,OAbL,EAcKX,KAdL,CAcW,UAAAC,GAAG;AAAA,eAAIS,MAAM,CAACT,GAAD,CAAV;AAAA,OAdd;AAeH,KAjB+B,CAAZ;AAAA,GAApB;;AAmBA,MAAMoB,OAAO,GAAG,SAAVA,OAAU,CAAAL,KAAK,EAAI;AACrB,QAAMM,aAAa,GAAG,EAAtB;AACA,WAAON,KAAK,IAAIA,KAAK,CAACO,MAAN,CAAa,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC5C,UAAI,CAACH,aAAa,CAACG,MAAM,CAACC,QAAR,CAAlB,EAAqC;AACjCJ,QAAAA,aAAa,CAACG,MAAM,CAACC,QAAR,CAAb,GAAiC,CAAjC;AACAF,QAAAA,KAAK,CAACG,IAAN,CAAW;AAAE1C,UAAAA,MAAM,EAAEwC,MAAM,CAACC,QAAjB;AAA2BE,UAAAA,IAAI,EAAEH,MAAM,CAACI,UAAxC;AAAoDC,UAAAA,IAAI,EAAEL,MAAM,CAACM;AAAjE,SAAX;AACH;;AACD,aAAOP,KAAP;AACH,KANe,EAMb,EANa,CAAhB;AAOH,GATD;;AAWA,MAAMQ,aAAa,GAAG,SAAhBA,aAAgB;AAAA,QAAG/C,MAAH,SAAGA,MAAH;AAAA,QAAW0B,QAAX,SAAWA,QAAX;AAAA,WAA0B,IAAIH,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7E,UAAIuB,UAAU,GAAG,CAAChD,MAAD,CAAjB;;AACA,UAAI0B,QAAQ,CAACM,MAAT,KAAoB,CAAxB,EAA2B;AACvBR,QAAAA,OAAO,CAACwB,UAAD,CAAP;AACH,OAFD,MAEO;AACH/D,QAAAA,GAAG,CAACwB,EAAJ,CAAOkB,MAAP,CAAc;AACVjC,UAAAA,EAAE,EAAE,UADM;AAEV+C,UAAAA,QAAQ,EAAE,UAFA;AAGVG,UAAAA,UAAU,EAAE,YAHF;AAIVE,UAAAA,UAAU,EAAE;AAJF,SAAd,EAKGlB,IALH,CAKQ,OALR,EAMKC,QANL,CAMc,OANd,EAMuB,cANvB,EAMuC,UANvC,EAOKA,QAPL,CAOc,OAPd,EAOuB,cAPvB,EAOuC,UAPvC,EAQKoB,OARL,CAQa,UARb,EAQyBvB,QARzB,EASKd,IATL,CASU,UAAAmB,KAAK,EAAI;AACX,cAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AAClB,gBAAMkB,IAAI,GAAGd,OAAO,CAACL,KAAD,CAApB;AACA,gBAAMoB,QAAQ,GAAGrE,SAAS,CAACoE,IAAD,EAAO,QAAP,CAA1B;AACAF,YAAAA,UAAU,GAAGd,MAAM,CAACC,IAAP,CAAYgB,QAAZ,CAAb;AACH;;AAED3B,UAAAA,OAAO,CAACwB,UAAD,CAAP;AACH,SAjBL,EAkBKjC,KAlBL,CAkBW,UAAAC,GAAG;AAAA,iBAAIS,MAAM,CAACT,GAAD,CAAV;AAAA,SAlBd;AAmBH;AAEJ,KA1B+C,CAA1B;AAAA,GAAtB;;AA4BA,MAAMoC,YAAY,GAAG,SAAfA,YAAe,CAACJ,UAAD;AAAA,WAAgB,IAAIzB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClExC,MAAAA,GAAG,CAACwB,EAAJ,CAAO,WAAP,EACKwC,OADL,CACa,kBADb,EACiCD,UADjC,EAEKpC,IAFL,CAEU,UAAAyC,SAAS;AAAA,eAAI7B,OAAO,CAAC6B,SAAD,CAAX;AAAA,OAFnB,EAGKtC,KAHL,CAGW,UAAAC,GAAG;AAAA,eAAIS,MAAM,CAACT,GAAD,CAAV;AAAA,OAHd;AAIH,KALoC,CAAhB;AAAA,GAArB;;AAOA,MAAMsC,GAAG,GAAG,SAANA,GAAM,CAAC/D,GAAD,EAAMC,GAAN,EAAc;AACtB,WAAO8B,WAAW,CAAC/B,GAAG,CAACU,OAAJ,CAAYP,EAAb,CAAX,CACFkB,IADE,CACGmC,aADH,EAEFnC,IAFE,CAEGwC,YAFH,EAGFxC,IAHE,CAGG,UAAAyC,SAAS;AAAA,aAAI7D,GAAG,CAACa,IAAJ,CAASgD,SAAT,CAAJ;AAAA,KAHZ,EAIFtC,KAJE,CAII,UAAAC,GAAG;AAAA,aAAIxB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,MAAM,EAAE,CAACU,GAAD;AAAV,OAArB,CAAJ;AAAA,KAJP,CAAP;AAKH,GAND;;AAQA,MAAMuC,OAAO,GAAG,SAAVA,OAAU,CAAChE,GAAD,EAAMC,GAAN,EAAc;AAC1BP,IAAAA,GAAG,CAACwB,EAAJ,CAAO,WAAP,EACKE,KADL,CACW;AAAEjB,MAAAA,EAAE,EAAEH,GAAG,CAACW,MAAJ,CAAWR;AAAjB,KADX,EAEK8D,KAFL,GAGK5C,IAHL,CAGU,UAAAnB,QAAQ;AAAA,aAAID,GAAG,CAACa,IAAJ,CAASZ,QAAT,CAAJ;AAAA,KAHlB,EAIKsB,KAJL,CAIW,UAAAC,GAAG;AAAA,aAAIxB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,MAAM,EAAE,CAACU,GAAD;AAAV,OAArB,CAAJ;AAAA,KAJd;AAKH,GAND;;AAQA,SAAO;AAAE1B,IAAAA,IAAI,EAAJA,IAAF;AAAQ6B,IAAAA,MAAM,EAANA,MAAR;AAAgBmC,IAAAA,GAAG,EAAHA,GAAhB;AAAqBC,IAAAA,OAAO,EAAPA;AAArB,GAAP;AACH,CAhJD","sourcesContent":["const { array2map } = require('../common/mapUtil')\n\nmodule.exports = app => {\n    const { existsOrError, notExistsOrError } = app.api.validation\n\n    const save = (req, res) => {\n        const employee = {\n            id: req.body.id,\n            name: req.body.name,\n            identifier: req.body.identifier,\n            email: req.body.email,\n            phone: req.body.phone,\n            userId: req.decoded.id\n        }\n\n        if (req.params.id) employee.id = req.params.id\n\n        try {\n            existsOrError(employee.name, 'Name was not informed!')\n            existsOrError(employee.identifier, 'Identifier was not informed!')\n            existsOrError(employee.userId, 'User was not informed!')\n        } catch (msg) {\n            return res.status(400).json({ errors: [msg] })\n        }\n\n        if (employee.id) {\n            employee.updated_at = new Date()\n\n            app.db('employees')\n                .update(employee)\n                .where({ id: employee.id })\n                .then(_ => res.status(204).send())\n                .catch(err => res.status(500).json({ errors: [err] }))\n        } else {\n\n            employee.created_at = new Date()\n            employee.updated_at = null\n\n            app.db('employees')\n                .insert(employee, 'id')\n                .then(_ => res.status(204).send())\n                .catch(err => {\n                    res.status(500).json({ errors: [err] })\n                })\n        }\n    }\n\n    const remove = async (req, res) => {\n        try {\n            existsOrError(req.params.id, \"Employee id was not informed!\")\n\n            //const desks = await app.db('desks').where({ employeeId: req.params.id })\n            //notExistsOrError(desks, \"There is a desk with this employee!\")\n\n            const rowsDeleted = await app.db('employees').where({ id: req.params.id }).del()\n\n            existsOrError(rowsDeleted, \"Employee was not found!\")\n\n            res.status(204).send()\n        } catch (msg) {\n            res.status(400).json({ errors: [msg] })\n        }\n    }\n\n    const getRoomsIds = (userId) => new Promise((resolve, reject) => {\n        let roomsIds = []\n        app.db.select({\n            id: 'rooms.id',\n        }).from('rooms')\n            .leftJoin('teams', 'teams.roomId', 'rooms.id')\n            .leftJoin('users', 'teams.userId', 'users.id')\n            .where({ 'rooms.userId': userId })\n            .orWhere({ 'users.id': userId })\n            .then(rooms => {\n                if (rooms.length > 0) {\n                    const roomsMap = array2map(rooms, 'id')\n                    roomsIds = Object.keys(roomsMap)\n                }\n                resolve({ userId, roomsIds })\n            })\n            .catch(err => reject(err))\n    })\n\n    const getTeam = rooms => {\n        const distinctUsers = {}\n        return rooms && rooms.reduce((users, member) => {\n            if (!distinctUsers[member.memberId]) {\n                distinctUsers[member.memberId] = 1\n                users.push({ userId: member.memberId, user: member.memberName, time: member.memberTime })\n            }\n            return users\n        }, [])\n    }\n\n    const getMembersIds = ({ userId, roomsIds }) => new Promise((resolve, reject) => {\n        let membersIds = [userId]\n        if (roomsIds.length === 0) {\n            resolve(membersIds)\n        } else {\n            app.db.select({\n                id: 'rooms.id',\n                memberId: 'users.id',\n                memberName: 'users.name',\n                memberTime: 'users.created_at'\n            }).from('rooms')\n                .leftJoin('teams', 'teams.roomId', 'rooms.id')\n                .leftJoin('users', 'teams.userId', 'users.id')\n                .whereIn('rooms.id', roomsIds)\n                .then(rooms => {\n                    if (rooms.length > 0) {\n                        const team = getTeam(rooms)\n                        const usersMap = array2map(team, 'userId')\n                        membersIds = Object.keys(usersMap)\n                    }\n\n                    resolve(membersIds)\n                })\n                .catch(err => reject(err))\n        }\n\n    })\n\n    const getEmployees = (membersIds) => new Promise((resolve, reject) => {\n        app.db('employees')\n            .whereIn('employees.userId', membersIds)\n            .then(employees => resolve(employees))\n            .catch(err => reject(err))\n    })\n\n    const get = (req, res) => {\n        return getRoomsIds(req.decoded.id)\n            .then(getMembersIds)\n            .then(getEmployees)\n            .then(employees => res.json(employees))\n            .catch(err => res.status(500).json({ errors: [err] }))\n    }\n\n    const getById = (req, res) => {\n        app.db('employees')\n            .where({ id: req.params.id })\n            .first()\n            .then(employee => res.json(employee))\n            .catch(err => res.status(500).json({ errors: [err] }))\n    }\n\n    return { save, remove, get, getById }\n}"]},"metadata":{},"sourceType":"module"}