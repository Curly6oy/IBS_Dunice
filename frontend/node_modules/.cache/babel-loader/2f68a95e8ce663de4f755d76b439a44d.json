{"ast":null,"code":"import _classCallCheck from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\Scripts\\\\IBS_Dunice\\\\frontend\\\\src\\\\desk\\\\FileUploadComponent.jsx\";\nimport React from 'react';\n\nvar FileUploadComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileUploadComponent, _React$Component);\n\n  function FileUploadComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FileUploadComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FileUploadComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      uploading: false,\n      error: null\n    };\n\n    _this.handleFileChange = function (event) {\n      var file = event.target.files[0];\n      if (!file) return; // Проверяем тип файла\n\n      if (!file.type.startsWith('image/')) {\n        _this.setState({\n          error: 'Please select an image file'\n        });\n\n        return;\n      }\n\n      _this.setState({\n        uploading: true,\n        error: null\n      });\n\n      var formData = new FormData();\n      formData.append('templateFile', file);\n      fetch('api/templates/upload', {\n        method: 'POST',\n        body: formData\n      }).then(function (response) {\n        return response.text().then(function (text) {\n          try {\n            return JSON.parse(text);\n          } catch (error) {\n            throw new Error(\"Could not parse JSON, because: \".concat(error, \".\\nServer response: \").concat(text));\n          }\n        });\n      }).then(function (data) {\n        _this.setState({\n          uploading: false\n        });\n\n        console.log('File uploaded successfully:', data);\n      }).catch(function (error) {\n        _this.setState({\n          uploading: false,\n          error: error.toString()\n        });\n\n        console.error('Error uploading file:', error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(FileUploadComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          uploading = _this$state.uploading,\n          error = _this$state.error;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"btn \".concat(uploading ? 'btn-secondary' : 'btn-primary'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, uploading ? 'Загружается...' : 'Загрузить изображение'), React.createElement(\"input\", {\n        id: \"file-upload\",\n        type: \"file\",\n        accept: \"image/*\" // Принимаем только изображения\n        ,\n        onChange: this.handleFileChange,\n        onClick: function onClick(event) {\n          return event.target.value = null;\n        } // Сброс значения для повторной загрузки того же файла\n        ,\n        style: {\n          display: 'block',\n          margin: '10px 0'\n        } // Сделать input видимым\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), error && React.createElement(\"p\", {\n        className: \"error\",\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, error));\n    }\n  }]);\n\n  return FileUploadComponent;\n}(React.Component);\n\nexport default FileUploadComponent;","map":{"version":3,"sources":["F:\\Scripts\\IBS_Dunice\\frontend\\src\\desk\\FileUploadComponent.jsx"],"names":["React","FileUploadComponent","state","uploading","error","handleFileChange","event","file","target","files","type","startsWith","setState","formData","FormData","append","fetch","method","body","then","response","text","JSON","parse","Error","data","console","log","catch","toString","value","display","margin","color","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass FileUploadComponent extends React.Component {\r\n    state = {\r\n      uploading: false,\r\n      error: null\r\n    };\r\n  \r\n    handleFileChange = event => {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n\r\n      // Проверяем тип файла\r\n      if (!file.type.startsWith('image/')) {\r\n        this.setState({ error: 'Please select an image file' });\r\n        return;\r\n      }\r\n\r\n      this.setState({ uploading: true, error: null });\r\n      const formData = new FormData();\r\n      formData.append('templateFile', file);\r\n  \r\n      fetch('api/templates/upload', {\r\n        method: 'POST',\r\n        body: formData\r\n      })\r\n      .then(response => {\r\n        return response.text().then(text => {\r\n            try {\r\n                return JSON.parse(text);\r\n            } catch (error) {\r\n                throw new Error(`Could not parse JSON, because: ${error}.\\nServer response: ${text}`);\r\n            }\r\n        });\r\n      })\r\n      .then(data => {\r\n        this.setState({ uploading: false });\r\n        console.log('File uploaded successfully:', data);\r\n      })\r\n      .catch(error => {\r\n        this.setState({ uploading: false, error: error.toString() });\r\n        console.error('Error uploading file:', error);\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      const { uploading, error } = this.state;\r\n      return (\r\n        <div>\r\n          <label htmlFor=\"file-upload\" className={`btn ${uploading ? 'btn-secondary' : 'btn-primary'}`}>\r\n            {uploading ? 'Загружается...' : 'Загрузить изображение'}\r\n          </label>\r\n          <input\r\n            id=\"file-upload\"\r\n            type=\"file\"\r\n            accept=\"image/*\" // Принимаем только изображения\r\n            onChange={this.handleFileChange}\r\n            onClick={(event) => event.target.value = null} // Сброс значения для повторной загрузки того же файла\r\n            style={{ display: 'block', margin: '10px 0' }} // Сделать input видимым\r\n          />\r\n          {error && <p className=\"error\" style={{ color: 'red' }}>{error}</p>}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default FileUploadComponent;\r\n"]},"metadata":{},"sourceType":"module"}