{"version":3,"file":"index.js","sources":["../src/components/layout/grid.js","../node_modules/style-inject/dist/style-inject.es.js","../src/components/operator/if.js","../src/components/tree/slideBar.js","../src/components/tree/treeItem.js","../src/components/tree/tree.js"],"sourcesContent":["import React, { Component } from 'react'\n\nexport default class Grid extends Component {\n\n    toCssClasses(numbers) {\n        const cols = numbers ? numbers.split(' ') : []\n        let classes = ''\n\n        if(cols[0]) classes += `col-xs-${cols[0]}` \n        if(cols[1]) classes += ` col-sm-${cols[1]}`\n        if(cols[2]) classes += ` col-md-${cols[2]}`\n        if(cols[3]) classes += ` col-lg-${cols[3]}`\n\n        return classes \n    }\n\n    render() {\n        const gridClasses = this.toCssClasses(this.props.cols || '12')\n        return (\n            <div className={gridClasses}> \n                {this.props.children}\n            </div> \n        )\n    }\n}","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","export default props => {\n    if(props.test) {\n        return props.children\n    } else {\n        return false\n    }\n}","import React from 'react'\nimport './slideBar.css'\nimport If from '../operator/if'\n\nconst MIN = 0\nconst MAX = 10\n\nexport default props => {\n    return (\n        <If test={!props.hideSlideBar}>\n            <div className=\"sliderContent\">\n                <input className={`slider ${getColor(props.node.value)}`} type=\"range\" min={MIN} max={MAX}\n                    id={`slide_${props.node.id}`} value={props.node.value || MIN} onChange={e => handleChange(e, props)} />\n                <div className=\"sliderValue\">{props.node.value}</div>    \n            </div>\n        </If>        \n    )\n}\n\nconst handleChange = (event, props) => {\n    if (props.onChange) {\n        props.onChange(event.target.value, props.node)\n    }\n}\n\nconst getColor = (value) => {\n    let color = ''\n    if (value === null) {\n        color = 'gray'\n    } else if (value == 0) {\n        color = 'red'\n    } else if (value < 3) {\n        color = 'orange'\n    } else if (value < 5) {\n        color = 'light_orange'\n    } else if (value == 5) {\n        color = 'yellow'\n    } else if (value < 8) {\n        color = 'yellow_green'\n    } else if (value < 10) {\n        color = 'light_green'\n    } else if (value == 10) {\n        color = 'green'\n    }\n    return color\n}","import React, { Component } from 'react'\nimport './treeItem.css'\nimport If from '../operator/if'\nimport SlideBar from './slideBar'\n\nexport default class TreeItem extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { hideChildren: false }\n    }\n\n    componentWillMount() {\n        this.setState({ ...this.state, node: this.props.node, hideChildren: this.props.shrink })\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.node != nextProps.node) {\n            this.setState({ ...this.state, node: nextProps.node })\n        }\n    }\n\n    toggleIcon(node) {\n        this.setState({ ...this.state, hideChildren: !this.state.hideChildren })\n    }\n\n    render() {\n        return (\n            <div key={`item_${this.state.node.id}`} className=\"node\">\n                <div className={this.props.children ? 'parent' : ''}>\n                    <div className=\"treeItem\">\n                        <If test={this.props.children}>\n                            <div className=\"treeItemDescription\">\n                                <a onClick={() => this.toggleIcon(this.state.node)}>\n                                    <i className={`${this.state.hideChildren ? 'icon ion-md-arrow-dropright' : 'icon ion-md-arrow-dropdown'}`} />\n                                </a>\n                                <div>\n                                    <a onClick={() => this.toggleIcon(this.state.node)}>{this.state.node.description}</a>\n                                </div>\n                            </div>\n                        </If>\n                        <If test={!this.props.children}>\n                            <div className=\"treeItemDescription\">{this.state.node.description}</div>\n                        </If>\n                        <div className=\"controls\">\n                            <SlideBar node={this.state.node} onChange={this.props.onChange} hideSlideBar={this.props.hideSlideBar} />\n                            <If test={this.props.onEdit || this.props.onDelete}>\n                                <div className='mr-3'>\n                                    <If test={this.props.onEdit} >\n                                        <button className='btn btn-default' onClick={e => { e.preventDefault(); this.props.onEdit(this.state.node) }} small='true'>\n                                            <i className='icon ion-md-create'></i>\n                                        </button>\n                                    </If>\n                                    <If test={this.props.onDelete} >\n                                        <button className='btn btn-danger' onClick={e => { e.preventDefault(); this.props.onDelete(this.state.node) }} small='true'>\n                                            <i className='icon ion-md-trash'></i>\n                                        </button>\n                                    </If>\n                                </div>\n                            </If>\n                        </div>\n                    </div>\n                </div>\n                <If test={this.props.children && !this.state.hideChildren}>\n                    <div className='children'>\n                        {this.props.children}\n                    </div>\n                </If>\n            </div >\n        )\n    }\n}\n","import React, { Component, Fragment } from 'react'\nimport Grid from '../layout/grid'\nimport TreeItem from './treeItem'\nimport './tree.css'\n\nexport default class Tree extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { tree: [] }\n        this.handleChange = this.handleChange.bind(this)\n        this.getValuesMap = this.getValuesMap.bind(this)\n    }\n\n    componentWillMount() {\n        this.setState({ tree: this.props.tree })\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.tree != nextProps.tree) {\n            this.setState({ tree: nextProps.tree })\n        }\n    }\n\n    getInitialValuesMap(tree, initialMap = {}) {\n        return tree.reduce((map, node) => {\n            map[node.id] = { value: node.value, parentId: node.parentId }\n            return this.getInitialValuesMap(node.children, map)\n        }, initialMap)\n    }\n\n    getValuesMap(tree, node, value) {\n        const initialValuesMap = this.getInitialValuesMap(tree)\n        const valuesMap = this.refreshNodesValues(initialValuesMap, node, value)\n        return valuesMap\n    }\n\n    refreshNodesValues(valuesMap, node, value) {\n        const nodeId = node.id\n        const parentId = valuesMap[nodeId].parentId\n        const oldValue = valuesMap[nodeId].value || 0\n\n        valuesMap[nodeId] = { value, parentId }\n\n        this.refreshChildrenNodes(nodeId, valuesMap, oldValue)\n        this.refreshParentNodes(nodeId, valuesMap)\n\n        return valuesMap\n    }\n\n    refreshParentNodes(nodeId, valuesMap) {\n        const parentId = valuesMap[nodeId].parentId\n        if (parentId) {\n            const brothers = Object.getOwnPropertyNames(valuesMap).filter(id => valuesMap[id].parentId == valuesMap[nodeId].parentId)\n            const sum = brothers.reduce((accumulator, id) => accumulator + parseInt(valuesMap[id].value || 0), 0)\n            const parentValue = sum / (brothers.length)\n\n            valuesMap[parentId] = { ...valuesMap[parentId], value: parseInt(parentValue) }\n\n            this.refreshParentNodes(parentId, valuesMap)\n        }\n    }\n\n    refreshChildrenNodes(nodeId, valuesMap, oldValue = 0) {\n        const MAX = 10\n        const MIN = 0\n\n        const getChildren = valuesMap =>\n            Object.getOwnPropertyNames(valuesMap).filter(id => valuesMap[id].parentId == nodeId)\n\n        const refreshChildren = (delta, children) => {\n            let overcome = 0\n            const innerChildren = []\n            children.forEach(id => {\n                let oldValue = parseInt(valuesMap[id].value || 0)\n                let newValue = oldValue + delta\n\n                if (delta >= 0 && newValue > MAX) {\n                    overcome += newValue - MAX\n                    newValue = MAX\n                } else if (delta < 0 && newValue < MIN) {\n                    overcome += newValue - MIN\n                    newValue = MIN\n                }\n\n                if (newValue > MIN && newValue < MAX) {\n                    innerChildren.push(id)\n                }\n\n                valuesMap[id].value = parseInt(newValue)\n                this.refreshChildrenNodes(id, valuesMap, oldValue)\n            })\n\n            if (overcome && innerChildren.length > 0) {\n                delta = overcome / innerChildren.length\n                refreshChildren(delta, innerChildren)\n            }\n        }\n\n        const newValue = +valuesMap[nodeId].value || 0\n        const children = getChildren(valuesMap)\n        if (newValue == MIN || newValue == MAX) {\n\n            children.forEach(id => {\n                const childOldAnswer = parseInt(valuesMap[id].value || 0)\n                valuesMap[id].value = newValue\n\n                this.refreshChildrenNodes(id, valuesMap, childOldAnswer)\n            })\n        } else {\n            const delta = newValue - oldValue\n            refreshChildren(delta, children)\n        }\n    }\n\n    refreshTree(tree, valuesMap) {\n        return tree.map(\n            node => {\n                const children = this.refreshTree(node.children, valuesMap)\n                return valuesMap.hasOwnProperty(node.id) ? { ...node, value: valuesMap[node.id].value, children } : { ...node, children }\n            })\n    }\n\n    handleChange(value, node) {\n        const { tree } = this.state\n        const valuesMap = this.getValuesMap(tree, node, value)\n        const refreshedTree = this.refreshTree(tree, valuesMap)\n\n        this.setState({ tree: refreshedTree }, () => {\n            if (this.props.input && this.props.input.onChange) {\n                this.props.input.onChange(refreshedTree)\n            }\n        })\n    }\n\n    render() {\n        return (\n            <Fragment>\n                {buildTree(this.state.tree, this.handleChange, this.props)}\n            </Fragment>\n        )\n    }\n}\n\nconst buildTree = (tree, onChange, props) => tree && tree.map(node => {\n    const children = node.children\n    const childrenTree = children.length && buildTree(children, onChange, props)\n    return (\n        <TreeItem key={`node_${node.id}`} node={node} onChange={onChange} hideSlideBar={props.hideSlideBar} shrink={props.shrink && node.parentId != null} controls={props.controls} onEdit={props.onEdit} onDelete={props.onDelete}>\n            {childrenTree}\n        </TreeItem>\n    )\n})\n\nexport function getChecklistById(tree, checklistId, found = null) {\n    return tree.reduce((found, checklist) => {\n        if (checklist.id === checklistId) {\n            found = checklist\n        } else if (checklist.children) {\n            const foundInChildren = getChecklistById(checklist.children, checklistId)\n            if (foundInChildren) {\n                found = foundInChildren\n            }\n        }\n        return found\n    }, found)\n}"],"names":["Grid","numbers","cols","split","classes","gridClasses","toCssClasses","props","React","children","Component","test","MIN","MAX","hideSlideBar","getColor","node","value","id","handleChange","e","event","onChange","target","color","TreeItem","state","hideChildren","setState","shrink","nextProps","toggleIcon","description","onEdit","onDelete","preventDefault","Tree","tree","bind","getValuesMap","initialMap","reduce","map","parentId","getInitialValuesMap","initialValuesMap","valuesMap","refreshNodesValues","nodeId","oldValue","refreshChildrenNodes","refreshParentNodes","brothers","Object","getOwnPropertyNames","filter","sum","accumulator","parseInt","parentValue","length","getChildren","refreshChildren","delta","overcome","innerChildren","forEach","newValue","push","childOldAnswer","refreshTree","hasOwnProperty","refreshedTree","input","buildTree","childrenTree","controls"],"mappings":"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"}