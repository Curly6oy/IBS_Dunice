'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Grid = function (_Component) {
    inherits(Grid, _Component);

    function Grid() {
        classCallCheck(this, Grid);
        return possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).apply(this, arguments));
    }

    createClass(Grid, [{
        key: 'toCssClasses',
        value: function toCssClasses(numbers) {
            var cols = numbers ? numbers.split(' ') : [];
            var classes = '';

            if (cols[0]) classes += 'col-xs-' + cols[0];
            if (cols[1]) classes += ' col-sm-' + cols[1];
            if (cols[2]) classes += ' col-md-' + cols[2];
            if (cols[3]) classes += ' col-lg-' + cols[3];

            return classes;
        }
    }, {
        key: 'render',
        value: function render() {
            var gridClasses = this.toCssClasses(this.props.cols || '12');
            return React__default.createElement(
                'div',
                { className: gridClasses },
                this.props.children
            );
        }
    }]);
    return Grid;
}(React.Component);

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".treeItem {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 10px 0px;    \n}\n\n.treeItemDescription {\n    display: flex;\n    align-items: center;\n    margin-left: 10px;\n}\n\n.treeItemDescription div {\n    margin-left: 5px;\n}\n\n.treeItem:hover {\n    background-color: #edf1f6;\n}\n\na {\n    color: #333;    \n}\na:hover {\n    color: #333;\n    cursor:pointer;\n}";
styleInject(css);

var If = (function (props) {
    if (props.test) {
        return props.children;
    } else {
        return false;
    }
});

var css$1 = ".slider {\n    -webkit-appearance: none;  /* Override default CSS styles */\n    appearance: none;\n    width: 70px !important;\n    height: 10px; /* Specified height */\n    background: #d3d3d3; /* Grey background */\n    outline: none; /* Remove outline */\n    opacity: 0.8; /* Set transparency (for mouse-over effects on hover) */\n    -webkit-transition: .2s; /* 0.2 seconds transition on hover */\n    transition: opacity .2s;   \n    border-radius: 2px;\n}\n\n.sliderValue{\n    width: 10px;\n    margin-left: 5px;\n}\n\n.sliderContent{\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-right: 10px;\n}\n\n.slider:hover {\n    opacity: 1; /* Fully shown on mouse-over */\n}\n\n.slider::-webkit-slider-thumb {\n    -webkit-appearance: none; /* Override default look */\n    appearance: none;\n    width: 16px; /* Set a specific slider handle width */\n    height: 16px; /* Slider handle height */\n    background: rgba(0, 0, 0, 0.3); /* Green background */\n    cursor: pointer; /* Cursor on hover */ \n    outline: gray solid 1px;\n}\n\n.slider::-moz-range-thumb {\n    width: 16px; /* Set a specific slider handle width */\n    height: 16px; /* Slider handle height */\n    background: rgba(0, 0, 0, 0.3); /* Green background */\n    cursor: pointer; /* Cursor on hover */\n}\n\n.red{\n    background: #DC3545;\n}\n\n.orange {\n    background: #ff6600;\n}\n\n.light_orange {\n    background: #ff9900;\n}\n\n.yellow{\n    background: #FFCC00;\n}\n\n.yellow_green {\n    background: #99ff00;\n}\n\n\n.light_green{\n    background: #66ff00;\n}\n\n.green{\n    background: #28A745;\n}\n\n.gray{\n    background: #d3d3d3;\n}";
styleInject(css$1);

var MIN = 0;
var MAX = 10;

var SlideBar = (function (props) {
    return React__default.createElement(
        If,
        { test: !props.hideSlideBar },
        React__default.createElement(
            'div',
            { className: 'sliderContent' },
            React__default.createElement('input', { className: 'slider ' + getColor(props.node.value), type: 'range', min: MIN, max: MAX,
                id: 'slide_' + props.node.id, value: props.node.value || MIN, onChange: function onChange(e) {
                    return handleChange(e, props);
                } }),
            React__default.createElement(
                'div',
                { className: 'sliderValue' },
                props.node.value
            )
        )
    );
});

var handleChange = function handleChange(event, props) {
    if (props.onChange) {
        props.onChange(event.target.value, props.node);
    }
};

var getColor = function getColor(value) {
    var color = '';
    if (value === null) {
        color = 'gray';
    } else if (value == 0) {
        color = 'red';
    } else if (value < 3) {
        color = 'orange';
    } else if (value < 5) {
        color = 'light_orange';
    } else if (value == 5) {
        color = 'yellow';
    } else if (value < 8) {
        color = 'yellow_green';
    } else if (value < 10) {
        color = 'light_green';
    } else if (value == 10) {
        color = 'green';
    }
    return color;
};

var TreeItem = function (_Component) {
    inherits(TreeItem, _Component);

    function TreeItem(props) {
        classCallCheck(this, TreeItem);

        var _this = possibleConstructorReturn(this, (TreeItem.__proto__ || Object.getPrototypeOf(TreeItem)).call(this, props));

        _this.state = { hideChildren: false };
        return _this;
    }

    createClass(TreeItem, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.setState(_extends({}, this.state, { node: this.props.node, hideChildren: this.props.shrink }));
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (this.props.node != nextProps.node) {
                this.setState(_extends({}, this.state, { node: nextProps.node }));
            }
        }
    }, {
        key: 'toggleIcon',
        value: function toggleIcon(node) {
            this.setState(_extends({}, this.state, { hideChildren: !this.state.hideChildren }));
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return React__default.createElement(
                'div',
                { key: 'item_' + this.state.node.id, className: 'node' },
                React__default.createElement(
                    'div',
                    { className: this.props.children ? 'parent' : '' },
                    React__default.createElement(
                        'div',
                        { className: 'treeItem' },
                        React__default.createElement(
                            If,
                            { test: this.props.children },
                            React__default.createElement(
                                'div',
                                { className: 'treeItemDescription' },
                                React__default.createElement(
                                    'a',
                                    { onClick: function onClick() {
                                            return _this2.toggleIcon(_this2.state.node);
                                        } },
                                    React__default.createElement('i', { className: '' + (this.state.hideChildren ? 'icon ion-md-arrow-dropright' : 'icon ion-md-arrow-dropdown') })
                                ),
                                React__default.createElement(
                                    'div',
                                    null,
                                    React__default.createElement(
                                        'a',
                                        { onClick: function onClick() {
                                                return _this2.toggleIcon(_this2.state.node);
                                            } },
                                        this.state.node.description
                                    )
                                )
                            )
                        ),
                        React__default.createElement(
                            If,
                            { test: !this.props.children },
                            React__default.createElement(
                                'div',
                                { className: 'treeItemDescription' },
                                this.state.node.description
                            )
                        ),
                        React__default.createElement(
                            'div',
                            { className: 'controls' },
                            React__default.createElement(SlideBar, { node: this.state.node, onChange: this.props.onChange, hideSlideBar: this.props.hideSlideBar }),
                            React__default.createElement(
                                If,
                                { test: this.props.onEdit || this.props.onDelete },
                                React__default.createElement(
                                    'div',
                                    { className: 'mr-3' },
                                    React__default.createElement(
                                        If,
                                        { test: this.props.onEdit },
                                        React__default.createElement(
                                            'button',
                                            { className: 'btn btn-default', onClick: function onClick(e) {
                                                    e.preventDefault();_this2.props.onEdit(_this2.state.node);
                                                }, small: 'true' },
                                            React__default.createElement('i', { className: 'icon ion-md-create' })
                                        )
                                    ),
                                    React__default.createElement(
                                        If,
                                        { test: this.props.onDelete },
                                        React__default.createElement(
                                            'button',
                                            { className: 'btn btn-danger', onClick: function onClick(e) {
                                                    e.preventDefault();_this2.props.onDelete(_this2.state.node);
                                                }, small: 'true' },
                                            React__default.createElement('i', { className: 'icon ion-md-trash' })
                                        )
                                    )
                                )
                            )
                        )
                    )
                ),
                React__default.createElement(
                    If,
                    { test: this.props.children && !this.state.hideChildren },
                    React__default.createElement(
                        'div',
                        { className: 'children' },
                        this.props.children
                    )
                )
            );
        }
    }]);
    return TreeItem;
}(React.Component);

var css$2 = ".node {\n    margin-top: 0px;\n}\n\n.parent {\n    font-weight: bold;    \n}\n\n.children {\n    margin-left: 15px;\n}\n\n.controls {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-right: 10px;\n}";
styleInject(css$2);

var Tree = function (_Component) {
    inherits(Tree, _Component);

    function Tree(props) {
        classCallCheck(this, Tree);

        var _this = possibleConstructorReturn(this, (Tree.__proto__ || Object.getPrototypeOf(Tree)).call(this, props));

        _this.state = { tree: [] };
        _this.handleChange = _this.handleChange.bind(_this);
        _this.getValuesMap = _this.getValuesMap.bind(_this);
        return _this;
    }

    createClass(Tree, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.setState({ tree: this.props.tree });
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (this.props.tree != nextProps.tree) {
                this.setState({ tree: nextProps.tree });
            }
        }
    }, {
        key: 'getInitialValuesMap',
        value: function getInitialValuesMap(tree) {
            var _this2 = this;

            var initialMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return tree.reduce(function (map, node) {
                map[node.id] = { value: node.value, parentId: node.parentId };
                return _this2.getInitialValuesMap(node.children, map);
            }, initialMap);
        }
    }, {
        key: 'getValuesMap',
        value: function getValuesMap(tree, node, value) {
            var initialValuesMap = this.getInitialValuesMap(tree);
            var valuesMap = this.refreshNodesValues(initialValuesMap, node, value);
            return valuesMap;
        }
    }, {
        key: 'refreshNodesValues',
        value: function refreshNodesValues(valuesMap, node, value) {
            var nodeId = node.id;
            var parentId = valuesMap[nodeId].parentId;
            var oldValue = valuesMap[nodeId].value || 0;

            valuesMap[nodeId] = { value: value, parentId: parentId };

            this.refreshChildrenNodes(nodeId, valuesMap, oldValue);
            this.refreshParentNodes(nodeId, valuesMap);

            return valuesMap;
        }
    }, {
        key: 'refreshParentNodes',
        value: function refreshParentNodes(nodeId, valuesMap) {
            var parentId = valuesMap[nodeId].parentId;
            if (parentId) {
                var brothers = Object.getOwnPropertyNames(valuesMap).filter(function (id) {
                    return valuesMap[id].parentId == valuesMap[nodeId].parentId;
                });
                var sum = brothers.reduce(function (accumulator, id) {
                    return accumulator + parseInt(valuesMap[id].value || 0);
                }, 0);
                var parentValue = sum / brothers.length;

                valuesMap[parentId] = _extends({}, valuesMap[parentId], { value: parseInt(parentValue) });

                this.refreshParentNodes(parentId, valuesMap);
            }
        }
    }, {
        key: 'refreshChildrenNodes',
        value: function refreshChildrenNodes(nodeId, valuesMap) {
            var _this3 = this;

            var oldValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var MAX = 10;
            var MIN = 0;

            var getChildren = function getChildren(valuesMap) {
                return Object.getOwnPropertyNames(valuesMap).filter(function (id) {
                    return valuesMap[id].parentId == nodeId;
                });
            };

            var refreshChildren = function refreshChildren(delta, children) {
                var overcome = 0;
                var innerChildren = [];
                children.forEach(function (id) {
                    var oldValue = parseInt(valuesMap[id].value || 0);
                    var newValue = oldValue + delta;

                    if (delta >= 0 && newValue > MAX) {
                        overcome += newValue - MAX;
                        newValue = MAX;
                    } else if (delta < 0 && newValue < MIN) {
                        overcome += newValue - MIN;
                        newValue = MIN;
                    }

                    if (newValue > MIN && newValue < MAX) {
                        innerChildren.push(id);
                    }

                    valuesMap[id].value = parseInt(newValue);
                    _this3.refreshChildrenNodes(id, valuesMap, oldValue);
                });

                if (overcome && innerChildren.length > 0) {
                    delta = overcome / innerChildren.length;
                    refreshChildren(delta, innerChildren);
                }
            };

            var newValue = +valuesMap[nodeId].value || 0;
            var children = getChildren(valuesMap);
            if (newValue == MIN || newValue == MAX) {

                children.forEach(function (id) {
                    var childOldAnswer = parseInt(valuesMap[id].value || 0);
                    valuesMap[id].value = newValue;

                    _this3.refreshChildrenNodes(id, valuesMap, childOldAnswer);
                });
            } else {
                var delta = newValue - oldValue;
                refreshChildren(delta, children);
            }
        }
    }, {
        key: 'refreshTree',
        value: function refreshTree(tree, valuesMap) {
            var _this4 = this;

            return tree.map(function (node) {
                var children = _this4.refreshTree(node.children, valuesMap);
                return valuesMap.hasOwnProperty(node.id) ? _extends({}, node, { value: valuesMap[node.id].value, children: children }) : _extends({}, node, { children: children });
            });
        }
    }, {
        key: 'handleChange',
        value: function handleChange(value, node) {
            var _this5 = this;

            var tree = this.state.tree;

            var valuesMap = this.getValuesMap(tree, node, value);
            var refreshedTree = this.refreshTree(tree, valuesMap);

            this.setState({ tree: refreshedTree }, function () {
                if (_this5.props.input && _this5.props.input.onChange) {
                    _this5.props.input.onChange(refreshedTree);
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return React__default.createElement(
                React.Fragment,
                null,
                buildTree(this.state.tree, this.handleChange, this.props)
            );
        }
    }]);
    return Tree;
}(React.Component);


var buildTree = function buildTree(tree, onChange, props) {
    return tree && tree.map(function (node) {
        var children = node.children;
        var childrenTree = children.length && buildTree(children, onChange, props);
        return React__default.createElement(
            TreeItem,
            { key: 'node_' + node.id, node: node, onChange: onChange, hideSlideBar: props.hideSlideBar, shrink: props.shrink && node.parentId != null, controls: props.controls, onEdit: props.onEdit, onDelete: props.onDelete },
            childrenTree
        );
    });
};

module.exports = Tree;
//# sourceMappingURL=index.js.map
