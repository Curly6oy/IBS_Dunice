{"version":3,"file":"index.js","sources":["../src/components/layout/grid.js","../node_modules/style-inject/dist/style-inject.es.js","../src/components/fishbone/fishboneChart.js"],"sourcesContent":["import React, { Component } from 'react'\n\nexport default class Grid extends Component {\n\n    toCssClasses(numbers) {\n        const cols = numbers ? numbers.split(' ') : []\n        let classes = ''\n\n        if(cols[0]) classes += `col-xs-${cols[0]}` \n        if(cols[1]) classes += ` col-sm-${cols[1]}`\n        if(cols[2]) classes += ` col-md-${cols[2]}`\n        if(cols[3]) classes += ` col-lg-${cols[3]}`\n\n        return classes \n    }\n\n    render() {\n        const gridClasses = this.toCssClasses(this.props.cols || '12')\n        return (\n            <div className={gridClasses}> \n                {this.props.children}\n            </div> \n        )\n    }\n}","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { Component } from 'react'\nimport Grid from '../layout/grid'\nimport './fishboneChart.css'\n\nconst INITIAL_STATE = {causes: undefined, effect: undefined, index: 0}\n\nexport default class FishboneChart extends Component {\n    constructor(props) {\n        super(props)\n        this.state = INITIAL_STATE\n    }\n\n    componentWillMount() { \n        const data = this.props.data\n        if(data) {\n            const effect = Object.keys(data)[this.state.index]            \n            this.setState({causes: data[effect], effect})\n        }        \n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(this.props.data !== nextProps.data) {\n            const data = nextProps.data\n            const effect = Object.keys(data)[this.state.index]\n            this.setState({causes: data[effect], effect})\n        }\n    }\n\n    render() {\n        if (!this.state.causes) {\n            return <React.Fragment></React.Fragment>\n        }\n\n        return (\n            <Grid cols={this.props.cols}>\n                <div className=\"fishboneChart\">\n                    {this.getCauses()}\n                    {this.getEffect()}\n                    {this.getLegend()}\n                </div>\n            </Grid >\n        )\n    }\n\n    getTopCauses(causes) {\n        const categories = Object.keys(causes)\n\n        const middle = parseInt(categories.length / 2)\n        const topArray = categories.slice(0, middle)\n\n        const color = this.getColor(this.state.index)\n        const topCauses = topArray.map((category, index) => {\n            return (\n                <div key={`top_causes_${category}_${index}`} className=\"causeContent\">\n                    <div className={`cause top ${color}_ ${color}Border`}>\n                        {category}\n                    </div>\n                    <div className=\"causeAndLine\">\n                        {this.getRootCauses(causes[category])}\n                        <div className={`diagonalLine ${color}TopBottom`}/>\n                    </div>\n                </div>\n            )\n        })\n\n        return (<div className=\"causesGroup\">{topCauses}</div>)\n    }\n\n    getRootCauses(rootCauses) {\n        const causes = rootCauses.map((rootCause, index) => {\n            return (<div key={`root_causes_${rootCause}_${index}`}>{rootCause}</div>)\n        })\n        return (<div className=\"rootCauses\">{causes}</div>)\n    }\n\n    getBottomCauses(causes) {\n        const categories = Object.keys(causes)\n\n        const middle = parseInt(categories.length / 2)\n        const bottomArray = categories.slice(middle)\n\n        const color = this.getColor(this.state.index)\n\n        const bottomCauses = bottomArray.map((category, index) => {\n            return (\n                <div key={`bottom_causes_${category}_${index}`}\n                    className=\"causeContent\">\n                    <div className=\"causeAndLine\">\n                        {this.getRootCauses(causes[category])}\n                        <div className={`diagonalLine ${color}BottomTop`}/>\n                    </div>\n                    <div className={`cause bottom ${color}_ ${color}Border`}>\n                        {category}\n                    </div>\n                </div>\n            )\n        })\n\n        return (<div className=\"causesGroup\">{bottomCauses}</div>)\n    }\n\n    getCauses() {\n        const causes = this.state.causes\n        const color = this.getColor(this.state.index)\n        return (\n            <div className=\"causes\">\n                {this.getTopCauses(causes)}\n                <div className={`lineEffect ${color}Border`} />\n                {this.getBottomCauses(causes)}\n            </div>\n        )\n    }\n\n    getEffect() {        \n        const color = this.getColor(this.state.index)\n        return (\n            <div className=\"effect\">\n                <div className={`effectValue left ${color}_ ${color}Border`}>\n                    {this.state.effect}\n                </div>\n            </div>\n        )\n    }\n\n    selectDataset(index) {\n        const data = this.props.data\n        if(data) {\n            const effect = Object.keys(data)[index]            \n            this.setState({causes: data[effect], effect, index})\n        }\n    }\n\n    getLegend() {        \n        const labels = Object.keys(this.props.data)\n\n        if(labels.length <= 1) {\n            return\n        }\n\n        const labelsDivs = labels.map((label, index) => {\n            const labelClass = index === this.state.index ? 'label_' : 'labelLineThrough'\n            const color = this.getColor(index)\n            return (\n                <div key={`labels_${label}_${index}`} className=\"legendLabel\" onClick={() => this.selectDataset(index)}>\n                    <div className={`labelSquare legend all ${color}_dark ${color}Border`} />\n                    <div className={labelClass}>{label}</div>\n                </div>\n            )\n        })\n\n        return (\n            <div className=\"legend\">\n                {labelsDivs}\n            </div>\n        )\n    }\n\n    getColor(index) {\n        const colors = [\n            'blue',\n            'pink',\n            'gray',\n            'green',            \n            'blue_two',            \n            'orange',\n            'black',            \n            'purple'\n        ]\n    \n        if (index >= colors.length) {\n            index -= colors.length\n        }\n\n        return colors[index]\n    }\n}"],"names":["Grid","numbers","cols","split","classes","gridClasses","toCssClasses","props","React","children","Component","INITIAL_STATE","causes","undefined","effect","index","FishboneChart","state","data","Object","keys","setState","nextProps","getCauses","getEffect","getLegend","categories","middle","parseInt","length","topArray","slice","color","getColor","topCauses","map","category","getRootCauses","rootCauses","rootCause","bottomArray","bottomCauses","getTopCauses","getBottomCauses","labels","labelsDivs","label","labelClass","selectDataset","colors"],"mappings":"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"}