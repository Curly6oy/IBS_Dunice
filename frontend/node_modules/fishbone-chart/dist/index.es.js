import React, { Component } from 'react';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Grid = function (_Component) {
    inherits(Grid, _Component);

    function Grid() {
        classCallCheck(this, Grid);
        return possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).apply(this, arguments));
    }

    createClass(Grid, [{
        key: 'toCssClasses',
        value: function toCssClasses(numbers) {
            var cols = numbers ? numbers.split(' ') : [];
            var classes = '';

            if (cols[0]) classes += 'col-xs-' + cols[0];
            if (cols[1]) classes += ' col-sm-' + cols[1];
            if (cols[2]) classes += ' col-md-' + cols[2];
            if (cols[3]) classes += ' col-lg-' + cols[3];

            return classes;
        }
    }, {
        key: 'render',
        value: function render() {
            var gridClasses = this.toCssClasses(this.props.cols || '12');
            return React.createElement(
                'div',
                { className: gridClasses },
                this.props.children
            );
        }
    }]);
    return Grid;
}(Component);

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".fishboneChart{\n    display: flex;        \n    justify-items: center;\n    min-height: 200px;\n}\n\n.top {\n    border-bottom: 2px solid;\n    border-radius: 10%;\n}\n\n.bottom {\n    border-top: 2px solid;\n    border-radius: 10%;\n}\n\n.left {\n    border-left: 2px solid;\n    border-radius: 10%;\n}\n\n.all {\n    border: 2px solid;\n}\n\n.causes {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n\n.causesGroup {\n    flex: 1;\n    display: flex;\n    margin-right: 10px;\n}\n\n.cause {    \n    display: flex;\n    justify-content: center; \n    align-items: center;   \n    width: 60%;\n    font-size: 0.95em;\n    font-weight: 400;        \n    color: #4f4f4f;\n    padding: 5px 0px;\n}\n\n.causeAndLine {\n    display: flex;\n    flex: 1;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n}\n\n.rootCauses {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-end;\n    flex: 3;\n    font-size: 0.85em;\n    font-weight: 400;\n    color: #4f4f4f;\n    text-align: right;\n    padding: 15px 0px;\n}\n\n.legend {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    margin-left: 10px;\n}\n\n.legendLabel {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #4f4f4f;\n    font-size: 0.95em;\n    font-weight: 400; \n    margin-bottom: 6px;   \n    cursor: default;     \n} \n\n.blue_{\n    background: rgb(0, 192, 239, 0.1);\n}\n\n.black_{\n    background: rgb(17, 17, 17, 0.1);\n}\n\n.blue_two_ {\n    background: rgb(11, 120, 206, 0.1);\n}\n\n.gray_ {\n    background: rgb(104,115,140, 0.1);\n}\n\n.green_ {\n    background:rgb(48, 187, 187, 0.1);\n}\n\n.pink_ {\n    background: rgb(216, 27, 96, 0.1);\n}\n\n.purple_ {\n    background: rgb(85, 82, 153, 0.1);\n}\n\n.orange_ {\n    background:rgb(255, 119, 1, 0.1);\n}\n\n.blue_dark{\n    background: rgb(0, 192, 239, 0.4);\n}\n\n.black_dark{\n    background: rgb(17, 17, 17, 0.4);\n}\n\n.blue_two_dark {\n    background: rgb(11, 120, 206, 0.4);\n}\n\n.gray_dark {\n    background: rgb(104,115,140, 0.4);\n}\n\n.green_dark {\n    background:rgb(48, 187, 187, 0.4);\n}\n\n.pink_dark {\n    background: rgb(216, 27, 96, 0.4);\n}\n\n.purple_dark {\n    background: rgb(85, 82, 153, 0.4);\n}\n\n.orange_dark {\n    background:rgb(255, 119, 1, 0.4);\n}\n\n.blueBorder{\n    border-color: rgb(0, 192, 239) !important;\n}\n\n.blackBorder{\n    border-color: rgb(17, 17, 17) !important;\n}\n\n.blue_twoBorder {\n    border-color: rgb(11, 120, 206) !important;\n}\n\n.grayBorder {\n    border-color: rgb(104,115,140) !important;\n}\n\n.greenBorder {\n    border-color: rgb(48, 187, 187) !important;\n}\n\n.pinkBorder {\n    border-color: rgb(216, 27, 96) !important;\n}\n\n.purpleBorder {\n    border-color: rgb(85, 82, 153) !important;\n}\n\n.orangeBorder {\n    border-color: rgb(255, 119, 1) !important;\n}\n\n.labelSquare{\n    flex: 1;\n    width: 42px;\n    height: 14px;    \n    margin: 0px 4px 0px 4px;\n}\n\n.labelLineThrough{\n    text-decoration: line-through;\n    font-size: 0.95em;\n    font-weight: 400;\n    color: #4f4f4f;\n}\n\n.label_{\n    font-size: 0.95em;\n    font-weight: 400;    \n    color: #4f4f4f;\n}\n\n.effect {    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.effectValue {    \n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 0.95em;\n    font-weight: 400; \n    color: #4f4f4f;\n    padding: 5px 10px 5px 10px;  \n}\n\n.diagonalLine {\n    flex: 1;\n    height:100%;\n}\n\n.blueTopBottom {\n    background: linear-gradient(to top right, transparent calc(50% - 2px), rgb(0, 192, 239), transparent calc(50% + 1.5px) );\n}\n\n.blueBottomTop {\n    background: linear-gradient(to bottom right, transparent calc(50% - 2px), rgb(0, 192, 239), transparent calc(50% + 1.5px) );\n}\n\n.blackTopBottom {\n    background: linear-gradient(to top right, transparent calc(50% - 2px), rgb(17, 17, 17), transparent calc(50% + 1.5px) );\n}\n\n.blackBottomTop {\n    background: linear-gradient(to bottom right, transparent calc(50% - 2px), rgb(17, 17, 17), transparent calc(50% + 1.5px) );\n}\n\n.blue_twoTopBottom {\n    background: linear-gradient(to top right, transparent calc(50% - 2px), rgb(11, 120, 206), transparent calc(50% + 1.5px) );\n}\n\n.blue_twoBottomTop {\n    background: linear-gradient(to bottom right, transparent calc(50% - 2px), rgb(11, 120, 206), transparent calc(50% + 1.5px) );\n}\n\n.grayTopBottom {\n    background: linear-gradient(to top right, transparent calc(50% - 2px), rgb(104,115,140), transparent calc(50% + 1.5px) );\n}\n\n.grayBottomTop {\n    background: linear-gradient(to bottom right, transparent calc(50% - 2px), rgb(104,115,140), transparent calc(50% + 1.5px) );\n}\n\n.greenTopBottom {\n    background: linear-gradient(to top right, transparent calc(50% - 2px), rgb(48, 187, 187), transparent calc(50% + 1.5px) );\n}\n\n.greenBottomTop {\n    background: linear-gradient(to bottom right, transparent calc(50% - 2px), rgb(48, 187, 187), transparent calc(50% + 1.5px) );\n}\n\n.pinkTopBottom {\n    background: linear-gradient(to top right, transparent calc(50% - 2px), rgb(216, 27, 96), transparent calc(50% + 1.5px) );\n}\n\n.pinkBottomTop {\n    background: linear-gradient(to bottom right, transparent calc(50% - 2px), rgb(216, 27, 96), transparent calc(50% + 1.5px) );\n}\n\n.purpleTopBottom {\n    background: linear-gradient(to top right, transparent calc(50% - 2px), rgb(85, 82, 153), transparent calc(50% + 1.5px) );\n}\n\n.purpleBottomTop {\n    background: linear-gradient(to bottom right, transparent calc(50% - 2px), rgb(85, 82, 153), transparent calc(50% + 1.5px) );\n}\n\n.orangeTopBottom {\n    background: linear-gradient(to top right, transparent calc(50% - 2px), rgb(255, 119, 1), transparent calc(50% + 1.5px) );\n}\n\n.orangeBottomTop {\n    background: linear-gradient(to bottom right, transparent calc(50% - 2px), rgb(255, 119, 1), transparent calc(50% + 1.5px) );\n}\n\n.lineEffect {\n    width: 100%;    \n    border-bottom: 2px solid;\n}\n\n.causeContent{\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    min-height: 50%;\n}";
styleInject(css);

var INITIAL_STATE = { causes: undefined, effect: undefined, index: 0 };

var FishboneChart = function (_Component) {
    inherits(FishboneChart, _Component);

    function FishboneChart(props) {
        classCallCheck(this, FishboneChart);

        var _this = possibleConstructorReturn(this, (FishboneChart.__proto__ || Object.getPrototypeOf(FishboneChart)).call(this, props));

        _this.state = INITIAL_STATE;
        return _this;
    }

    createClass(FishboneChart, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var data = this.props.data;
            if (data) {
                var effect = Object.keys(data)[this.state.index];
                this.setState({ causes: data[effect], effect: effect });
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (this.props.data !== nextProps.data) {
                var data = nextProps.data;
                var effect = Object.keys(data)[this.state.index];
                this.setState({ causes: data[effect], effect: effect });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            if (!this.state.causes) {
                return React.createElement(React.Fragment, null);
            }

            return React.createElement(
                Grid,
                { cols: this.props.cols },
                React.createElement(
                    'div',
                    { className: 'fishboneChart' },
                    this.getCauses(),
                    this.getEffect(),
                    this.getLegend()
                )
            );
        }
    }, {
        key: 'getTopCauses',
        value: function getTopCauses(causes) {
            var _this2 = this;

            var categories = Object.keys(causes);

            var middle = parseInt(categories.length / 2);
            var topArray = categories.slice(0, middle);

            var color = this.getColor(this.state.index);
            var topCauses = topArray.map(function (category, index) {
                return React.createElement(
                    'div',
                    { key: 'top_causes_' + category + '_' + index, className: 'causeContent' },
                    React.createElement(
                        'div',
                        { className: 'cause top ' + color + '_ ' + color + 'Border' },
                        category
                    ),
                    React.createElement(
                        'div',
                        { className: 'causeAndLine' },
                        _this2.getRootCauses(causes[category]),
                        React.createElement('div', { className: 'diagonalLine ' + color + 'TopBottom' })
                    )
                );
            });

            return React.createElement(
                'div',
                { className: 'causesGroup' },
                topCauses
            );
        }
    }, {
        key: 'getRootCauses',
        value: function getRootCauses(rootCauses) {
            var causes = rootCauses.map(function (rootCause, index) {
                return React.createElement(
                    'div',
                    { key: 'root_causes_' + rootCause + '_' + index },
                    rootCause
                );
            });
            return React.createElement(
                'div',
                { className: 'rootCauses' },
                causes
            );
        }
    }, {
        key: 'getBottomCauses',
        value: function getBottomCauses(causes) {
            var _this3 = this;

            var categories = Object.keys(causes);

            var middle = parseInt(categories.length / 2);
            var bottomArray = categories.slice(middle);

            var color = this.getColor(this.state.index);

            var bottomCauses = bottomArray.map(function (category, index) {
                return React.createElement(
                    'div',
                    { key: 'bottom_causes_' + category + '_' + index,
                        className: 'causeContent' },
                    React.createElement(
                        'div',
                        { className: 'causeAndLine' },
                        _this3.getRootCauses(causes[category]),
                        React.createElement('div', { className: 'diagonalLine ' + color + 'BottomTop' })
                    ),
                    React.createElement(
                        'div',
                        { className: 'cause bottom ' + color + '_ ' + color + 'Border' },
                        category
                    )
                );
            });

            return React.createElement(
                'div',
                { className: 'causesGroup' },
                bottomCauses
            );
        }
    }, {
        key: 'getCauses',
        value: function getCauses() {
            var causes = this.state.causes;
            var color = this.getColor(this.state.index);
            return React.createElement(
                'div',
                { className: 'causes' },
                this.getTopCauses(causes),
                React.createElement('div', { className: 'lineEffect ' + color + 'Border' }),
                this.getBottomCauses(causes)
            );
        }
    }, {
        key: 'getEffect',
        value: function getEffect() {
            var color = this.getColor(this.state.index);
            return React.createElement(
                'div',
                { className: 'effect' },
                React.createElement(
                    'div',
                    { className: 'effectValue left ' + color + '_ ' + color + 'Border' },
                    this.state.effect
                )
            );
        }
    }, {
        key: 'selectDataset',
        value: function selectDataset(index) {
            var data = this.props.data;
            if (data) {
                var effect = Object.keys(data)[index];
                this.setState({ causes: data[effect], effect: effect, index: index });
            }
        }
    }, {
        key: 'getLegend',
        value: function getLegend() {
            var _this4 = this;

            var labels = Object.keys(this.props.data);

            if (labels.length <= 1) {
                return;
            }

            var labelsDivs = labels.map(function (label, index) {
                var labelClass = index === _this4.state.index ? 'label_' : 'labelLineThrough';
                var color = _this4.getColor(index);
                return React.createElement(
                    'div',
                    { key: 'labels_' + label + '_' + index, className: 'legendLabel', onClick: function onClick() {
                            return _this4.selectDataset(index);
                        } },
                    React.createElement('div', { className: 'labelSquare legend all ' + color + '_dark ' + color + 'Border' }),
                    React.createElement(
                        'div',
                        { className: labelClass },
                        label
                    )
                );
            });

            return React.createElement(
                'div',
                { className: 'legend' },
                labelsDivs
            );
        }
    }, {
        key: 'getColor',
        value: function getColor(index) {
            var colors = ['blue', 'pink', 'gray', 'green', 'blue_two', 'orange', 'black', 'purple'];

            if (index >= colors.length) {
                index -= colors.length;
            }

            return colors[index];
        }
    }]);
    return FishboneChart;
}(Component);

export default FishboneChart;
//# sourceMappingURL=index.es.js.map
